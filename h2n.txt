#include <iostream>
#include <vector>
#include <chrono>
#include <omp.h>

using namespace std;
using namespace std::chrono;

// Bubble Sort algorithm
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; ++i) {
        for (int j = 0; j < n-i-1; ++j) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

// Parallel Bubble Sort algorithm
void parallelBubbleSort(vector<int>& arr) {
    int n = arr.size();
    bool swapped;
    for (int i = 0; i < n-1; ++i) {
        swapped = false;
        #pragma omp parallel for shared(arr, swapped)
        for (int j = 0; j < n-i-1; ++j) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
                swapped = true;
            }
        }
        if (!swapped) break;
    }
}

// Merge Sort algorithm
void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; ++i) L[i] = arr[l + i];
    for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        } else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }
}

void mergeSortHelper(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSortHelper(arr, l, m);
        mergeSortHelper(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void mergeSort(vector<int>& arr) {
    mergeSortHelper(arr, 0, arr.size() - 1);
}

// Parallel Merge Sort algorithm
void parallelMergeSortHelper(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        #pragma omp task
        parallelMergeSortHelper(arr, l, m);
        #pragma omp task
        parallelMergeSortHelper(arr, m + 1, r);
        #pragma omp taskwait
        merge(arr, l, m, r);
    }
}

void parallelMergeSort(vector<int>& arr) {
    #pragma omp parallel
    {
        #pragma omp single
        parallelMergeSortHelper(arr, 0, arr.size() - 1);
    }
}

// Function to measure execution time
template<typename Func>
double measureTime(Func func, vector<int>& arr) {
    auto start = high_resolution_clock::now();
    func(arr);
    auto end = high_resolution_clock::now();
    duration<double, std::nano> duration_ns = end - start;
    return duration_ns.count();
}

// Function to print array
void printArray(const vector<int>& arr) {
    cout << "Sorted Array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

int main() {
    // Define the array size
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    // Input array elements
    vector<int> arr(size);
    cout << "Enter the elements of the array:\n";
    for (int i = 0; i < size; ++i) {
        cin >> arr[i];
    }

    // Copy array for parallel sorting
    vector<int> arr_parallel = arr;

    // Measure time for sequential Bubble Sort
    double seq_bubble_time = measureTime(bubbleSort, arr);
    cout << "Sequential Bubble Sort Time: " << seq_bubble_time << " ns\n";
    printArray(arr);

    // Measure time for parallel Bubble Sort
    double par_bubble_time = measureTime(parallelBubbleSort, arr_parallel);
    cout << "Parallel Bubble Sort Time: " << par_bubble_time << " ns\n";
    printArray(arr_parallel);

    // Measure time for sequential Merge Sort
    double seq_merge_time = measureTime(mergeSort, arr);
    cout << "Sequential Merge Sort Time: " << seq_merge_time << " ns\n";
    printArray(arr);

    // Measure time for parallel Merge Sort
    double par_merge_time = measureTime(parallelMergeSort, arr_parallel);
    cout << "Parallel Merge Sort Time: " << par_merge_time << " ns\n";
    printArray(arr_parallel);

    return 0;
}
